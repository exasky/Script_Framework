#!/bin/sh
################################################################################
#   To use this framework 
#           You have to implement some functions:
#
#   usage:          To explain how to use your script
#   declare_env:    To declare all variables in your script
#   check_env:      To check script's prerequisites to a good execution
#                           All script's parameters are passed through
#   main:           To launch the script execution
#                           All script's parameters are passed through
#
#
#           You have to follow some rules:
#
#   - Use "source 'path_to_script_framework'" at the beginning of yours
#   - Declare variables in declare_env function only
#   - Do not call declare_env and check_env
#   - Do not use any instruction out of a function
#       @ Ignoring this may cause issues at the execution
#       @ The main function is automatically called
#   - If you want to use "recursive sourcing" (eg. Source a file that sources a file, etc..)
#       @ Declare the declare_source function with lines like: "/path/to/your_script.sh"
#       @ When "recursice sourcing" is used, you can declare 'declare & check _env' functions in your 
#         sourced files. You don't have to declare them in your main script anymore
#       @ Be careful when using 'multi sourcing': do not declare functions with the same name,
#         variables with the same name, etc.. 
#               It doesn't apply for declare_env, check_env & declare_source
#   - The function "logError" set an error flag that is used by "error_happened?" function
#
#   Author:     SIMAR Jeremy
#   Version:    0.5
#
#   Change log:
#       V0.1 : Initial
#       V0.2 : Add recursive sourcing
#       V0.3 : Better/Faster env checks
#       V0.4 : Add "ignore treatment" in declare_source
#       V0.5 : Add "error treatment" mechanism when calling logError function
#
################################################################################


################# __ifndef__ #################
MAIN_SCRIPT=$(cd "$(dirname "$0")" && pwd -P)"/$0"
script_path=$(echo $MAIN_SCRIPT | sed -e "s@/@_@g" -e "s@\.@_@g")
define_var="ALREADY_SOURCED_$script_path"
[[ ! -z ${!define_var} ]] && return
export ALREADY_SOURCED_$script_path="defined"
################# __ifndef__ #################

source "/home/simar/scripts/logFunctions.sh"

FILES_TO_BE_SOURCED=""
SF_INTERNAL_ERROR=0

################################################################################
#
#   USABLE FRAMEWORK FUNCTIONS
#
################################################################################

logError() { 
    logF ${Red} "ERROR: $@"
    SF_INTERNAL_ERROR=1
}

##
# Function that check if an error happened. If so, arguments are executed
#   Example: error_happened? exit_with_usage 1
#       will call "exit_with_usage" function with argument "1" if an error happened
##
error_happened?() { [[ $SF_INTERNAL_ERROR == 1 ]] && $@; }

exit_with_error_message() { logFatal "$@"; }

exit_with_error_and_usage() {
    local error=$1
    shift
    logError "$@"
    usage
    exit $error
}

exit_with_usage() {
    usage
    exit $1
}

##
# Function that check if an element belongs to an list
# $1 : The list
# $2 : The element
##
list_contains() {
    for element in $1; do
        [[ $element == $2 ]] && return 0
    done
    return 1
}


################################################################################
#
#   INTERNAL FRAMEWORK FUNCTIONS
#
################################################################################

##
# Function that check if a function exists
# $1 : The function to be checked
##
SF_function_declared() { type $1 &> /dev/null; }

##
# Function that check if a function exists in a file
#   The function must be in this format: [function ]function_name[ ]*()
# $1 : The function to be checked
# $2 : The file
##
SF_function_exists_in_file() { [[ ! -z "$(egrep "$1 *\(\)" $2)" ]]; }

##
# Function that unset framework function
##
SF_unset_functions() {
    unset -f declare_env
    unset -f check_env
}

##
# Function that return all files declared in 'declare_source' function in a file
# $1 : The file
##
SF_get_declared_sources_in_file() {
    local declare_source_first_line_number=$(egrep "declare_source *\(\)" $1 -n | cut -d":" -f1)
    [[ ! -z $(echo $declare_source_first_line_number | grep " ") ]] && echo "failed" && return
    local sources=""
    local current_line_number=$((declare_source_first_line_number + 1))
    local current_line=$(sed "$current_line_number"'q;d' $1)
    
    while [ "${current_line//[[:blank:]]/}" != "}" ] ; do
        # Take only lines that start with double quote (")
        if [[ $(echo -e "${current_line}" | sed -e 's/^[[:space:]]*//') == \"* ]] ; then
            sources="$sources "$(echo -e "${current_line}" | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//' -e 's/\"//g')
        fi
        current_line_number=$((current_line_number + 1))
        current_line=$(sed "$current_line_number"'q;d' $1)
    done
    
    echo "$sources"
}

##
# Function that call declare_env function from the current sourced file
##
SF_internal_declare_env() {
    declare_env_flag=1
    declare_env
}

##
# Function that call check_env function from the current sourced file
##
SF_internal_check_env() {
    check_env_flag=1
    check_env
}

##
# Function that set FILES_TO_BE_SOURCED var with all the files which have to be sourced
##
SF_set_files_to_be_sourced_by_depth() {
    local files_to_source=$(SF_get_declared_sources_in_file $1)
    [[ "$files_to_source" == "failed" ]] && logFatal "Too many declare_source in " "$1"

    for file in $files_to_source ; do
        local currentFile=$file
        SF_function_exists_in_file declare_source $currentFile && SF_set_files_to_be_sourced_by_depth $currentFile
        ! list_contains "$FILES_TO_BE_SOURCED" "$currentFile" && FILES_TO_BE_SOURCED="$FILES_TO_BE_SOURCED "$currentFile
    done
}

##
# Function that source and call declare_env and check_env from all the files 
# which have to be sourced
##
SF_internal_declare_sources() {
    SF_set_files_to_be_sourced_by_depth $MAIN_SCRIPT

    for file in $FILES_TO_BE_SOURCED ; do
        SF_unset_functions
        source $file
        SF_function_declared declare_env && SF_internal_declare_env
        SF_function_declared check_env   && SF_internal_check_env
    done
    SF_unset_functions
}

##
# Function that check the environment before launching the main function
##
SF_internal_check_functions() {
    ! SF_function_exists_in_file usage $MAIN_SCRIPT && logFatal "Function usage not implemented"
    ! SF_function_exists_in_file main $MAIN_SCRIPT && logFatal "Function main not implemented"
    
    SF_function_exists_in_file declare_source $MAIN_SCRIPT && SF_internal_declare_sources
    
    [[ $declare_env_flag != 1 ]] && ! SF_function_exists_in_file declare_env $MAIN_SCRIPT  && logFatal "Function declare_env not implemented"
    [[ $check_env_flag != 1 ]]   && ! SF_function_exists_in_file check_env $MAIN_SCRIPT    && logFatal "Function check_env not implemented"
}

##
# Main function
##
SF_internal_main() {
    SF_internal_check_functions
    
    source $MAIN_SCRIPT

    # These functions aren't mandatory if the main script sources files that contains them
    SF_function_declared declare_env && declare_env
    SF_function_declared check_env   && check_env $*

    main $*
}

SF_internal_main $*
